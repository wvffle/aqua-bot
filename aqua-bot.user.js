// ==UserScript==
// @name        aqua-bot
// @namespace   wvffle
// @description DEUS VULT
// @include     https://aqua.ilo.pl/team/problems.php
// @version     1
// @grant       none
// ==/UserScript==

const q = document.querySelector.bind(document);
const e = document.createElement.bind(document);

Element.prototype.q = function(selector) {
  return this.querySelector(selector);
}
Element.prototype.on = function(event, listener) {
  return this.addEventListener(event, listener);
}

program = [
  '#include<cstdio>\n',
  '// Licensed under MIT license\n\n',
  '\/*\n * This file was generated by my awesome *not cpp* bot after these observations:\n',
  ' *   - We have the result of execution error\n',
  ' *   - We have the correct test results (which is a good thing btw)\n',
  ' *   - We can easily raise an execution error by doing this kind of thing:\n',
  ' *     int main(void) {\n',
  ' *       int *a = new int;\n',
  ' *       scanf("%d", a);\n',
  ' *       return *a;\n',
  ' *     }\n *\n',
  ' * How the bot works?\n',
  ' * It is run on in the browser as a greasemonkey script. In the /team/problems.php\n',
  ' * section in every excercise a new <td> is added with a button to complete corresponding one.\n',
  ' * When the click event is called following things will happen:\n',
  ' *   - XHR request to send file with all wrong answers\n',
  ' *     - interval with XHR request to check if the file was processed\n',
  ' *   - XHR request to send file which raises an execution error\n',
  ' *     - interval with XHR request to check if the file was processed\n',
  ' *   - when two files were processed then prepare the body of a program\n',
  ' *   - XHR request to send program\n',
  ' */\n\n',
  '// Source: https://github.com/wvffle/aqua-bot\n\n',
]

const results = doc => {
  const q = doc.querySelector.bind(doc);
  
  const res = [];
  const diff = [].slice.call(q('#testResults tbody').children)
    .map(e => e.children[3])
    .filter(e => e != null);
  
  for (d of diff) res.push(d.textContent.split('\'')[3]);
  
  return res;
}

const problems = [].slice.call(q('table.list tbody').children);
const unsolved = problems.filter(e => e.q('img').getAttribute('alt') !== 'green');

for (p of problems) {
  const td = p.lastElementChild;
  if (~unsolved.indexOf(p)) {
    const name = p.children[0].textContent;
    td.setAttribute('name', name);
    td.innerHTML = '';
  }
}
for (u of unsolved) {
  let button;
  const td = u.lastElementChild;
  td.append(button = e('button'));
  
  button.innerHTML = 'DEUS VULT';
  button.on('click', e => {
    const name = td.getAttribute('name');
  })
}
